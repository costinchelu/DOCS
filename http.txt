HTTP

        ----request------------>
CLIENT                          SERVER
        <---------response------


Commands:

GET = ask to get something from the server
POST = ask to add something to the server
PUT = ask to update an information on the server
DELETE = ask to delete information from the server

request is done through query strings (GET) or body (POST)
response comes with a status code (200 for OK)


HTTPS uses TLS (transport layer security) or SSL (secure sockets layer)

to communicate to a server, we will use text and more precisely JSON

for example on client we have a user:

const user = {
    firstName: "John",
    lastName: "Doe"
};

we can JSON.stringify(user);
we get:
{
    "user"
    [
    {"firstName":"John", "lastName":"Doe"}
    ]
}

and send it to the server

the server will take information from JSON:
JSON.parse(user);

and the response of the server will be an object called money (user's money)
const money = {
    balance: 350
};

which will be parsed to JSON:
JSON.stringify(money);
to
{
    "money"
    [
    {"balance":"350"}
    ]
}

and returned to the client who will JSON.parse(money) to get the information

------

AJAX (Asynchronous JavaScript and XML) allows us to read from a web server after the page has loaded and update
the web page without reloading it from the beginning and send data in the background.

fetch("/my/url")
.then(response => {
    console.log(response);
});

for example in robofriends app we did a fetch on JSON placeholder site and we've got a json data which was transformed in
an object. We can try this in the console of chrome:
fetch("https://jsonplaceholder.typicode.com/users")
.then(response => response.json())
.then(data => console.log(data));

this will get the json and also parse it to an object (through json() method of fetch

-------

promise:
    - fulfilled
    - rejected
    - pending


HTTP REQUESTS


S.N.	Method and Description
1	    GET
The GET method is used to retrieve information from the given server using a given URI. Requests using GET should only retrieve data and should have no other effect on the data.

2	    HEAD
Same as GET, but it transfers the status line and the header section only.

3	    POST
A POST request is used to send data to the server, for example, customer information, file upload, etc. using HTML forms.

4	    PUT
Replaces all the current representations of the target resource with the uploaded content.

5	    DELETE
Removes all the current representations of the target resource given by URI.

6	    CONNECT
Establishes a tunnel to the server identified by a given URI.

7	    OPTIONS
Describe the communication options for the target resource.

8	    TRACE
Performs a message loop back test along with the path to the target resource.